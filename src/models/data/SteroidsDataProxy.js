// Generated by CoffeeScript 1.7.1
var SteroidsDataProxy,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SteroidsDataProxy = (function() {
  function SteroidsDataProxy(options) {
    this.options = options != null ? options : {};
    this.define = __bind(this.define, this);
    console.log("SteroidsData created");
  }

  SteroidsDataProxy.entityStore = {};

  SteroidsDataProxy.entityDefined = function(delegateCallback) {
    var myCallBack;
    return myCallBack = function(entity) {
      var entityProxy;
      if (entity == null) {
        entity = {};
      }
      console.log('entity defined ... name: #{entity.name}');
      entityProxy = new EntityProxy(entity);
      SteroidsDataProxy.entityStore[entity.name] = entityProxy;
      return delegateCallback(entityProxy);
    };
  };

  SteroidsDataProxy.entityNotification = function(entity, notification) {
    var entityProxy;
    if (entity == null) {
      entity = {};
    }
    if (notification == null) {
      notification = {};
    }
    console.log('entity updated ... name: #{entity.name} - notification type: #{notification.type}');
    entityProxy = SteroidsDataProxy.entityStore[entity.name];
    if (entityProxy != null) {
      return entityProxy.notify(notification);
    }
  };

  SteroidsDataProxy.prototype.define = function(entity, callbacks) {
    if (entity == null) {
      entity = {};
    }
    if (callbacks == null) {
      callbacks = {};
    }
    return steroids.nativeBridge.nativeCall({
      method: "steroidsData",
      parameters: {
        method: "define",
        entity: entity
      },
      successCallbacks: [SteroidsDataProxy.entityDefined(callbacks.onSuccess)],
      recurringCallbacks: [SteroidsDataProxy.entityNotification],
      failureCallbacks: [callbacks.onFailure]
    });
  };

  return SteroidsDataProxy;

})();
